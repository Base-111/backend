version: "3.8"

services:
  postgres:
    container_name: postgres
    image: postgres:14.8-alpine3.18
    command:
      - "postgres"
      - "-c"
      - "max_connections=50"
      - "-c"
      - "shared_buffers=1GB"
      - "-c"
      - "effective_cache_size=4GB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=512MB"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "temp_file_limit=10GB"
      - "-c"
      - "log_min_duration_statement=200ms"
      - "-c"
      - "idle_in_transaction_session_timeout=10s"
      - "-c"
      - "lock_timeout=1s"
      - "-c"
      - "statement_timeout=60s"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"
    environment:
      POSTGRES_DB: ${DB_NAME:?error}
      POSTGRES_USER: ${DB_USERNAME:?error}
      POSTGRES_PASSWORD: ${DB_PASSWORD:?error}
    expose:
      - "5432"
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G

  keycloakdb:
    container_name: keycloakdb
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${KC_POSTGRES_DB:?error}
      POSTGRES_USER: ${KC_POSTGRES_USER:?error}
      POSTGRES_PASSWORD: ${KC_POSTGRES_PASSWORD:?error}
    ports:
      - "5433:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${KC_POSTGRES_USER} -d ${KC_POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak_web:
    image: quay.io/keycloak/keycloak:23.0.7
    container_name: keycloak_web
    environment:
      KC_DB: ${KC_DB}
      KC_DB_URL: ${KC_DB_URL}
      KC_DB_USERNAME: ${KC_DB_USERNAME}
      KC_DB_PASSWORD: ${KC_DB_PASSWORD}
      KC_HOSTNAME: ${KC_HOSTNAME}
      KC_HOSTNAME_PORT: ${KC_HOSTNAME_PORT}
      KC_HOSTNAME_STRICT: ${KC_HOSTNAME_STRICT}
      KC_HOSTNAME_STRICT_HTTPS: ${KC_HOSTNAME_STRICT_HTTPS}
      KC_HTTP_ENABLED: ${KC_HTTP_ENABLED}
      KC_PROXY: ${KC_PROXY}
      KC_HOSTNAME_ADMIN_URL: http://localhost:8085
      KC_HOSTNAME_STRICT_BACKCHANNEL: "false"
      KC_HOSTNAME_BACKCHANNEL_DYNAMIC: "false"
      KC_LOG_LEVEL: ${KC_LOG_LEVEL}
      KC_METRICS_ENABLED: ${KC_METRICS_ENABLED}
      KC_HEALTH_ENABLED: ${KC_HEALTH_ENABLED}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
    command: start-dev
    depends_on:
      keycloakdb:
        condition: service_healthy
    ports:
      - "${KC_HOSTNAME_PORT}:8080"

  redis:
    container_name: redis
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    restart: on-failure
    environment:
      REDIS_USERNAME: ${REDIS_USERNAME}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    command: [
      "redis-server",
      "--port", "${REDIS_PORT}",
      "--bind", "0.0.0.0",
      "--protected-mode", "yes",
      "--requirepass", "${REDIS_PASSWORD}",
      "--save", "60", "1",
      "--loglevel", "warning"
    ]

  webui:
    image: ghcr.io/open-webui/open-webui:git-09a81eb
    ports:
      - "8080:8080"
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434
    volumes:
      - ./open-webui:/app/backend/data
    depends_on:
      - ollama

  ollama:
    image: docker.io/ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ./ollama:/root/.ollama
    container_name: ollama
    pull_policy: always
    tty: true
    restart: always
    environment:
      - OLLAMA_KEEP_ALIVE=24h

  api:
    container_name: api_${TAG}
    build:
      context: .
    volumes:
      - ./.env:/root/.env
    depends_on:
      - postgres
      - redis
    extra_hosts:
      - "localhost:host-gateway"
    environment:
      API_PORT: ${APP_PORT}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USERNAME: ${DB_USERNAME}
      DB_NAME: ${DB_NAME}
      DB_SSL_MODE: ${DB_SSL_MODE}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "${APP_PORT}:${APP_PORT}"
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G

volumes:
  postgres_data:
  redis-data: